//! `/unsubscribe` endpoint JSON-RPC wrapper

use serde::{Deserialize, Serialize};

use crate::prelude::*;
use crate::{dialect::Dialect, request::RequestMessage};

/// Request to unsubscribe from events relating to a given query.
#[derive(Clone, Debug, Deserialize, Eq, PartialEq, Serialize)]
pub struct Request {
    pub query: String,
}

impl Request {
    /// Unsubscribe from all events generated by the given query.
    pub fn new(query: String) -> Self {
        Self { query }
    }
}

impl RequestMessage for Request {
    fn method(&self) -> crate::Method {
        crate::Method::Unsubscribe
    }
}

impl<S: Dialect> crate::Request<S> for Request {
    type Response = Response;
}

/// Status responses
#[derive(Clone, Debug, Deserialize, Serialize)]
pub struct Response {}

impl crate::Response for Response {}
